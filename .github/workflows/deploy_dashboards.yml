name: Deploy Grafana Dashboards

on:
  push:
    paths:
      - 'dashboards/**'
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy all client dashboards with cleanup
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          $GrafanaURL = "http://localhost:3000"
          $ApiToken = "${{ secrets.GRAFANA_API_TOKEN }}"

          # Get folders from Git (dashboards/)
          $gitFolders = Get-ChildItem -Path "./dashboards" -Directory
          $gitFolderNames = $gitFolders.Name.ToLower()

          # Process each folder from Git
          foreach ($folder in $gitFolders) {
            $clientName = $folder.Name
            $folderUid = $clientName.ToLower()
            $clientPath = $folder.FullName

            Write-Host "`n=== Processing client: $clientName ==="

            # Ensure folder exists
            try {
              $grafanaFolder = Invoke-RestMethod -Uri "$GrafanaURL/api/folders/$folderUid" -Headers @{ Authorization = "Bearer $ApiToken" }
              Write-Host "Folder '$folderUid' exists in Grafana."
            } catch {
              Write-Host "Creating folder '$folderUid'..."
              $payload = @{ uid = $folderUid; title = $clientName } | ConvertTo-Json -Compress
              $grafanaFolder = Invoke-RestMethod -Uri "$GrafanaURL/api/folders" -Method Post -Headers @{
                Authorization = "Bearer $ApiToken"
                "Content-Type" = "application/json"
              } -Body $payload
            }

            # Always refresh folder info to get correct ID
            $grafanaFolder = Invoke-RestMethod -Uri "$GrafanaURL/api/folders/$folderUid" -Headers @{ Authorization = "Bearer $ApiToken" }

            # Upload dashboards
            $localUids = @()
            Get-ChildItem -Path $clientPath -Filter "*.json" | ForEach-Object {
              $json = Get-Content $_.FullName -Raw
              $dashboard = $json | ConvertFrom-Json

              if (-not $dashboard.uid) {
                Write-Error "Dashboard '$($_.Name)' missing 'uid'."
                exit 1
              }

              $localUids += $dashboard.uid

              $uploadPayload = @{
                dashboard = $dashboard
                folderUid = $folderUid
                overwrite = $true
              } | ConvertTo-Json -Depth 10

              Write-Host "Uploading dashboard: $($_.Name)"
              Invoke-RestMethod -Uri "$GrafanaURL/api/dashboards/db" -Method Post -Headers @{
                Authorization = "Bearer $ApiToken"
                "Content-Type" = "application/json"
              } -Body $uploadPayload
            }

            # Get dashboards currently in Grafana for this folder
            Write-Host "Getting existing dashboards in Grafana folder '$($grafanaFolder.title)' (ID: $($grafanaFolder.id))"
            $folderDashboards = Invoke-RestMethod -Uri "$GrafanaURL/api/search?folderIds=$($grafanaFolder.id)&type=dash-db" -Headers @{
              Authorization = "Bearer $ApiToken"
            }

            if (-not $folderDashboards) {
              Write-Host "No dashboards found in Grafana for folder '$($grafanaFolder.title)'"
            }

            $toDelete = $folderDashboards | Where-Object { $localUids -notcontains $_.uid }

            foreach ($dash in $toDelete) {
              Write-Host "Deleting dashboard '$($dash.title)' (uid: $($dash.uid))..."
              Invoke-RestMethod -Uri "$GrafanaURL/api/dashboards/uid/$($dash.uid)" -Method Delete -Headers @{
                Authorization = "Bearer $ApiToken"
              }
            }
          }

          # Get all folders from Grafana again for deletion check
          $grafanaFolders = Invoke-RestMethod -Uri "$GrafanaURL/api/folders" -Headers @{ Authorization = "Bearer $ApiToken" }

          # Delete folders in Grafana not in Git
          foreach ($grafanaFolder in $grafanaFolders) {
            $uid = $grafanaFolder.uid.ToLower()
            if ($gitFolderNames -notcontains $uid) {
              Write-Host "`nFolder '$uid' not found in Git. Deleting..."

              $dashboardsInFolder = Invoke-RestMethod -Uri "$GrafanaURL/api/search?folderIds=$($grafanaFolder.id)&type=dash-db" -Headers @{
                Authorization = "Bearer $ApiToken"
              }

              foreach ($dash in $dashboardsInFolder) {
                Write-Host "Deleting dashboard '$($dash.title)' (uid: $($dash.uid))..."
                Invoke-RestMethod -Uri "$GrafanaURL/api/dashboards/uid/$($dash.uid)" -Method Delete -Headers @{
                  Authorization = "Bearer $ApiToken"
                }
              }

              # Then delete the folder
              Invoke-RestMethod -Uri "$GrafanaURL/api/folders/$uid" -Method Delete -Headers @{
                Authorization = "Bearer $ApiToken"
              }

              Write-Host "Folder '$uid' deleted."
            }
          }
