name: Deploy Grafana Dashboards and Library Panels

on:
  push:
    paths:
      - 'dashboards/**'
      - 'provisioning/library_panels/**'
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy dashboards and library panels
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"

          # === Configure Grafana ===
          $GrafanaURL = "http://localhost:3000"
          $ApiToken = "${{ secrets.GRAFANA_API_TOKEN }}"

          Write-Host "`n===== Deploying to Grafana at $GrafanaURL ====="

          # === Deploy library panels ===
          $libraryPanelsDir = "./provisioning/library_panels"
          if (Test-Path $libraryPanelsDir) {
              Write-Host "Cleaning all existing library panels..."
              
              try {
                  $existingPanels = Invoke-RestMethod -Uri "$GrafanaURL/api/library-elements" -Headers @{ Authorization = "Bearer $ApiToken" }
                  foreach ($panel in $existingPanels) {
                      Invoke-RestMethod -Uri "$GrafanaURL/api/library-elements/$($panel.uid)" -Method Delete -Headers @{ Authorization = "Bearer $ApiToken" }
                      Write-Host "Deleted existing panel by UID: $($panel.uid)"
                  }
              } catch {
                  Write-Host "No existing library panels to delete or error fetching them."
              }

              # Import new panels
              Write-Host "Deploying library panels from $libraryPanelsDir"
              Get-ChildItem -Path $libraryPanelsDir -Filter "*.json" | ForEach-Object {
                  $panel = Get-Content $_.FullName -Raw | ConvertFrom-Json

                  if (-not $panel.uid) {
                      Write-Host "Skipping panel with missing UID"
                      return
                  }

                  # Remove id and version
                  if ($panel.PSObject.Properties.Name -contains 'id') { $panel.PSObject.Properties.Remove('id') }
                  if ($panel.PSObject.Properties.Name -contains 'version') { $panel.PSObject.Properties.Remove('version') }

                  $uploadPayload = $panel | ConvertTo-Json -Depth 20

                  # Create panel
                  Invoke-RestMethod -Uri "$GrafanaURL/api/library-elements" -Method Post -Headers @{
                      Authorization = "Bearer $ApiToken"
                      "Content-Type"  = "application/json"
                  } -Body $uploadPayload
                  Write-Host "âœ“ Deployed library panel: $($panel.uid)"
              }
          } else {
              Write-Host "No library panels folder found at $libraryPanelsDir"
          }

          # === Deploy dashboards ===
          $baseFolder = "./dashboards/hostA"
          $gitFolders = Get-ChildItem -Path $baseFolder -Directory -ErrorAction SilentlyContinue
          if (-not $gitFolders) {
            Write-Host "No folders found in $baseFolder"
            exit 0
          }

          $gitFolderNames = $gitFolders.Name.ToLower()
          $grafanaFolders = Invoke-RestMethod -Uri "$GrafanaURL/api/folders" -Headers @{ Authorization = "Bearer $ApiToken" }

          foreach ($folder in $gitFolders) {
            $clientName = $folder.Name
            $folderUid = $clientName.ToLower()
            $clientPath = $folder.FullName

            Write-Host "`n=== Processing client: $clientName ==="

            try {
              $updatedFolder = Invoke-RestMethod -Uri "$GrafanaURL/api/folders/$folderUid" -Headers @{ Authorization = "Bearer $ApiToken" }
              Write-Host "Folder '$folderUid' exists in Grafana."
            } catch {
              Write-Host "Creating folder '$folderUid'..."
              $payload = @{ uid = $folderUid; title = $clientName } | ConvertTo-Json -Compress
              $updatedFolder = Invoke-RestMethod -Uri "$GrafanaURL/api/folders" -Method Post -Headers @{
                Authorization = "Bearer $ApiToken"
                "Content-Type" = "application/json"
              } -Body $payload
            }

            # Upload dashboards
            $localUids = @()
            Get-ChildItem -Path $clientPath -Filter "*.json" | ForEach-Object {
              $json = Get-Content $_.FullName -Raw
              $dashboard = $json | ConvertFrom-Json

              if (-not $dashboard.uid) {
                Write-Error "Dashboard '$($_.Name)' missing 'uid'."
                exit 1
              }

              # Remove id and version before upload
              if ($dashboard.PSObject.Properties.Name -contains 'id') { $dashboard.PSObject.Properties.Remove('id') }
              if ($dashboard.PSObject.Properties.Name -contains 'version') { $dashboard.PSObject.Properties.Remove('version') }

              $localUids += $dashboard.uid

              $uploadPayload = @{
                dashboard = $dashboard
                folderUid = $folderUid
                overwrite = $true
              } | ConvertTo-Json -Depth 10

              Write-Host "Uploading dashboard: $($_.Name)"
              Invoke-RestMethod -Uri "$GrafanaURL/api/dashboards/db" -Method Post -Headers @{
                Authorization = "Bearer $ApiToken"
                "Content-Type" = "application/json"
              } -Body $uploadPayload
            }
          }

          Write-Host "`nðŸŽ‰ Deployment completed successfully!"
