name: Deploy Grafana Dashboards

on:
  push:
    paths:
      - 'dashboards/**'
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy dashboards to both Grafana instances
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"

          # Define both Grafana instances
          $grafanaInstances = @(
            @{ Url = "http://localhost:3000"; Token = "${{ secrets.GRAFANA_API_TOKEN }}" },
            @{ Url = "http://localhost:3001"; Token = "${{ secrets.GRAFANA_API_TOKENV_2 }}" }
          )

          # Get Git folders
          $gitFolders = Get-ChildItem -Path "./dashboards" -Directory
          $gitFolderNames = $gitFolders.Name.ToLower()

          foreach ($instance in $grafanaInstances) {
            $GrafanaURL = $instance.Url
            $ApiToken = $instance.Token

            Write-Host "`n===== Deploying to Grafana instance at $GrafanaURL ====="

            # Get folders from Grafana
            $grafanaFolders = Invoke-RestMethod -Uri "$GrafanaURL/api/folders" -Headers @{
              Authorization = "Bearer $ApiToken"
            }

            foreach ($folder in $gitFolders) {
              $clientName = $folder.Name
              $folderUid = $clientName.ToLower()
              $clientPath = $folder.FullName

              Write-Host "`n=== Processing client: $clientName ==="

              try {
                $updatedFolder = Invoke-RestMethod -Uri "$GrafanaURL/api/folders/$folderUid" -Headers @{
                  Authorization = "Bearer $ApiToken"
                }
                Write-Host "Folder '$folderUid' exists in Grafana."
              } catch {
                Write-Host "Creating folder '$folderUid'..."
                $payload = @{ uid = $folderUid; title = $clientName } | ConvertTo-Json -Compress
                $updatedFolder = Invoke-RestMethod -Uri "$GrafanaURL/api/folders" -Method Post -Headers @{
                  Authorization = "Bearer $ApiToken"
                  "Content-Type" = "application/json"
                } -Body $payload
              }

              # Upload dashboards
              $localUids = @()
              Get-ChildItem -Path $clientPath -Filter "*.json" | ForEach-Object {
                $json = Get-Content $_.FullName -Raw
                $dashboard = $json | ConvertFrom-Json

                if (-not $dashboard.uid) {
                  Write-Error "Dashboard '$($_.Name)' missing 'uid'."
                  exit 1
                }

                $localUids += $dashboard.uid

                $uploadPayload = @{
                  dashboard = $dashboard
                  folderUid = $folderUid
                  overwrite = $true
                } | ConvertTo-Json -Depth 10

                Write-Host "Uploading dashboard: $($_.Name)"
                Invoke-RestMethod -Uri "$GrafanaURL/api/dashboards/db" -Method Post -Headers @{
                  Authorization = "Bearer $ApiToken"
                  "Content-Type" = "application/json"
                } -Body $uploadPayload
              }

              # Get all dashboards and filter by folder
              Write-Host "Getting dashboards from folder '$($updatedFolder.title)' (ID: $($updatedFolder.id))"
              $allDashboards = Invoke-RestMethod -Uri "$GrafanaURL/api/search?query=&type=dash-db" -Headers @{
                Authorization = "Bearer $ApiToken"
              }

              $folderDashboards = $allDashboards | Where-Object { $_.folderId -eq $updatedFolder.id }

              # Delete dashboards not in Git
              $toDelete = $folderDashboards | Where-Object { $localUids -notcontains $_.uid }

              foreach ($dash in $toDelete) {
                Write-Host "Deleting dashboard '$($dash.title)' (uid: $($dash.uid))..."
                Invoke-RestMethod -Uri "$GrafanaURL/api/dashboards/uid/$($dash.uid)" -Method Delete -Headers @{
                  Authorization = "Bearer $ApiToken"
                }
              }
            }

            # Delete folders that no longer exist in Git
            foreach ($grafanaFolder in $grafanaFolders) {
              $uid = $grafanaFolder.uid.ToLower()
              if ($gitFolderNames -notcontains $uid) {
                Write-Host "`nFolder '$uid' not found in Git. Deleting..."

                $allDashboards = Invoke-RestMethod -Uri "$GrafanaURL/api/search?query=&type=dash-db" -Headers @{
                  Authorization = "Bearer $ApiToken"
                }

                $dashboardsInFolder = $allDashboards | Where-Object { $_.folderId -eq $grafanaFolder.id }

                foreach ($dash in $dashboardsInFolder) {
                  Write-Host "Deleting dashboard '$($dash.title)' (uid: $($dash.uid))..."
                  Invoke-RestMethod -Uri "$GrafanaURL/api/dashboards/uid/$($dash.uid)" -Method Delete -Headers @{
                    Authorization = "Bearer $ApiToken"
                  }
                }

                # Delete folder
                Invoke-RestMethod -Uri "$GrafanaURL/api/folders/$uid" -Method Delete -Headers @{
                  Authorization = "Bearer $ApiToken"
                }

                Write-Host "Folder '$uid' deleted."
              }
            }
          }
