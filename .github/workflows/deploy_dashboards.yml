name: Deploy Grafana Dashboards

on:
  push:
    paths:
      - 'dashboards/**'
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy dashboards to Grafana with cleanup
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"

          $GrafanaURL = "http://localhost:3000"
          $ApiToken = "${{ secrets.GRAFANA_API_TOKEN }}"
          $FolderUID = "auto-folder"

          # Проверяем и создаём папку, если нужно
          try {
            Invoke-RestMethod -Uri "$GrafanaURL/api/folders/$FolderUID" -Headers @{
              Authorization = "Bearer $ApiToken"
              "Content-Type" = "application/json"
            } -Method Get -ErrorAction Stop
            Write-Host "Folder '$FolderUID' already exists, skipping creation."
          }
          catch {
            Write-Host "Folder '$FolderUID' not found, creating..."
            $folderPayload = @{ uid = $FolderUID; title = "CI Dashboards" } | ConvertTo-Json -Compress
            Invoke-RestMethod -Uri "$GrafanaURL/api/folders" -Method Post -Headers @{
              Authorization = "Bearer $ApiToken"
              "Content-Type" = "application/json"
            } -Body $folderPayload -ErrorAction Stop
          }

          # Собираем UID локальных дашбордов и одновременно заливаем их
          $localDashboards = @()
          Get-ChildItem -Path ".\dashboards" -Filter "*.json" | ForEach-Object {
            $json = Get-Content $_.FullName -Raw
            $dashboard = $json | ConvertFrom-Json

            if (-not $dashboard.uid) {
              Write-Error "Dashboard file $($_.Name) has no uid! Add a unique uid field."
              exit 1
            }

            $localDashboards += $dashboard.uid

            $payload = @{
              dashboard = $dashboard
              folderUid = $FolderUID
              overwrite = $true
            } | ConvertTo-Json -Depth 10

            Write-Host "Uploading $($_.Name)..."
            Invoke-RestMethod -Uri "$GrafanaURL/api/dashboards/db" -Method Post -Headers @{
              Authorization = "Bearer $ApiToken"
              "Content-Type" = "application/json"
            } -Body $payload
          }

          # Получаем id папки для поиска дашбордов
          $folder = Invoke-RestMethod -Uri "$GrafanaURL/api/folders/$FolderUID" -Headers @{
            Authorization = "Bearer $ApiToken"
          }

          # Получаем список дашбордов из папки (тип dash-db — только дашборды)
          $grafanaDashboards = Invoke-RestMethod -Uri "$GrafanaURL/api/search?folderIds=$($folder.id)&type=dash-db" -Headers @{
            Authorization = "Bearer $ApiToken"
          }

          # Определяем дашборды, отсутствующие локально (удалённые из гита)
          $toDelete = $grafanaDashboards | Where-Object { $localDashboards -notcontains $_.uid }

          foreach ($dash in $toDelete) {
            Write-Host "Deleting dashboard $($dash.title) with uid $($dash.uid)..."
            Invoke-RestMethod -Uri "$GrafanaURL/api/dashboards/uid/$($dash.uid)" -Method Delete -Headers @{
              Authorization = "Bearer $ApiToken"
            }
          }
