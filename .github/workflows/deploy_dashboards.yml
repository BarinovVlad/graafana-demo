name: Deploy Grafana Dashboards and Library Panels

on:
  push:
    paths:
      - 'dashboards/**'
      - 'provisioning/library_panels/**'
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy dashboards and library panels
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"

          $grafanaTargets = @(
            @{ Folder = "hostA"; Url = "http://localhost:3000"; Token = "${{ secrets.GRAFANA_API_TOKEN }}" },
            @{ Folder = "hostB"; Url = "http://localhost:3001"; Token = "${{ secrets.GRAFANA_API_TOKENV_2 }}" }
          )

          foreach ($target in $grafanaTargets) {
            $GrafanaURL = $target.Url
            $ApiToken = $target.Token

            Write-Host "===== Deploying to Grafana at $GrafanaURL ====="

            # --- Library Panels ---
            $libraryPanelsDir = "./provisioning/library_panels"
            if (Test-Path $libraryPanelsDir) {
              Write-Host "Cleaning all existing library panels..."
              try {
                $existingPanels = Invoke-RestMethod -Uri "$GrafanaURL/api/library-elements" -Headers @{
                  Authorization = "Bearer $ApiToken"
                }
                foreach ($p in $existingPanels) {
                  Invoke-RestMethod -Uri "$GrafanaURL/api/library-elements/$($p.uid)" -Method Delete -Headers @{
                    Authorization = "Bearer $ApiToken"
                  }
                  Write-Host "Deleted panel: $($p.uid) ($($p.name))"
                }
              } catch {
                Write-Host "No existing library panels to delete or error fetching them."
              }

              # --- Deploy new panels ---
              Get-ChildItem -Path $libraryPanelsDir -Filter "*.json" | ForEach-Object {
                $panel = Get-Content $_.FullName -Raw | ConvertFrom-Json

                # Генерируем новый UID
                $panel.uid = [guid]::NewGuid().ToString("N")

                # Убираем id и version
                if ($panel.PSObject.Properties.Name -contains 'id') { $panel.PSObject.Properties.Remove('id') }
                if ($panel.PSObject.Properties.Name -contains 'version') { $panel.PSObject.Properties.Remove('version') }

                # POST в Grafana
                $payload = $panel | ConvertTo-Json -Depth 20
                Invoke-RestMethod -Uri "$GrafanaURL/api/library-elements" -Method Post -Headers @{
                  Authorization = "Bearer $ApiToken"
                  "Content-Type" = "application/json"
                } -Body $payload
                Write-Host "✅ Deployed library panel: $($panel.name) with new UID $($panel.uid)"
              }
            } else {
              Write-Host "No library panels folder found at $libraryPanelsDir"
            }

            # --- Dashboards ---
            $baseFolder = "./dashboards/$($target.Folder)"
            $gitFolders = Get-ChildItem -Path $baseFolder -Directory -ErrorAction SilentlyContinue
            if ($gitFolders) {
              foreach ($folder in $gitFolders) {
                $folderUid = $folder.Name.ToLower()
                $clientPath = $folder.FullName

                # Создание/проверка папки
                try {
                  $updatedFolder = Invoke-RestMethod -Uri "$GrafanaURL/api/folders/$folderUid" -Headers @{
                    Authorization = "Bearer $ApiToken"
                  }
                } catch {
                  $payload = @{ uid = $folderUid; title = $folder.Name } | ConvertTo-Json -Compress
                  $updatedFolder = Invoke-RestMethod -Uri "$GrafanaURL/api/folders" -Method Post -Headers @{
                    Authorization = "Bearer $ApiToken"
                    "Content-Type" = "application/json"
                  } -Body $payload
                }

                # Загрузка dashboard
                Get-ChildItem -Path $clientPath -Filter "*.json" | ForEach-Object {
                  $dashboard = Get-Content $_.FullName -Raw | ConvertFrom-Json
                  if ($dashboard.PSObject.Properties.Name -contains 'id') { $dashboard.PSObject.Properties.Remove('id') }
                  if ($dashboard.PSObject.Properties.Name -contains 'version') { $dashboard.PSObject.Properties.Remove('version') }

                  $payload = @{ dashboard = $dashboard; folderUid = $folderUid; overwrite = $true } | ConvertTo-Json -Depth 10
                  Invoke-RestMethod -Uri "$GrafanaURL/api/dashboards/db" -Method Post -Headers @{
                    Authorization = "Bearer $ApiToken"
                    "Content-Type" = "application/json"
                  } -Body $payload
                  Write-Host "Uploaded dashboard: $($_.Name)"
                }
              }
            }
          }

