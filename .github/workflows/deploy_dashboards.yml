name: Deploy Grafana Dashboards

on:
  push:
    paths:
      - 'dashboards/**'
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy dashboards to Grafana instances
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"

          # ===== CONFIG: добавь/изменяй хосты тут =====
          $grafanaTargets = @(
            @{ Name = "hostA"; Folder = "./dashboards/hostA"; Url = "http://localhost:3000"; Token = "${{ secrets.GRAFANA_API_TOKEN }}" },
            @{ Name = "hostB"; Folder = "./dashboards/hostB"; Url = "http://localhost:3001"; Token = "${{ secrets.GRAFANA_API_TOKENV_2 }}" }
          )
          # ============================================

          foreach ($target in $grafanaTargets) {
            $targetName = $target.Name
            $baseFolder = $target.Folder
            $GrafanaURL = $target.Url
            $ApiToken = $target.Token

            Write-Host "`n===== Deploying to Grafana at $GrafanaURL from $baseFolder (target: $targetName) ====="

            if (-not (Test-Path $baseFolder)) {
              Write-Host "Base folder not found: $baseFolder — skipping target $targetName"
              continue
            }

            # Получаем список клиентских папок (один уровень)
            $gitFolders = Get-ChildItem -Path $baseFolder -Directory -ErrorAction SilentlyContinue
            if (-not $gitFolders -or $gitFolders.Count -eq 0) {
              Write-Host "No client folders found in $baseFolder — nothing to deploy for $targetName"
              continue
            }

            # Набор имён клиентских папок (для удаления лишних папок в Grafana)
            $gitFolderNames = $gitFolders | ForEach-Object { $_.Name.ToLower() }

            # Получаем все папки из Grafana (если ошибка — лог и continue)
            try {
              $grafanaFolders = Invoke-RestMethod -Uri "$GrafanaURL/api/folders" -Headers @{ Authorization = "Bearer $ApiToken" } -ErrorAction Stop
            } catch {
              Write-Host "ERROR: failed to fetch folders from $GrafanaURL — $($_.Exception.Message)"
              continue
            }

            foreach ($folder in $gitFolders) {
              $clientName = $folder.Name
              $folderUid = $clientName.ToLower()
              $clientPath = $folder.FullName

              Write-Host "`n--- Processing client folder: $clientName (path: $clientPath) ---"

              # Ensure folder exists in Grafana (get or create)
              try {
                $updatedFolder = Invoke-RestMethod -Uri "$GrafanaURL/api/folders/$folderUid" -Headers @{ Authorization = "Bearer $ApiToken" } -ErrorAction Stop
                Write-Host "Folder exists in Grafana: uid=$folderUid id=$($updatedFolder.id)"
              } catch {
                Write-Host "Folder '$folderUid' not found in Grafana — creating..."
                $payload = @{ uid = $folderUid; title = $clientName } | ConvertTo-Json -Compress
                try {
                  $updatedFolder = Invoke-RestMethod -Uri "$GrafanaURL/api/folders" -Method Post -Headers @{
                    Authorization = "Bearer $ApiToken"
                    "Content-Type" = "application/json"
                  } -Body $payload -ErrorAction Stop
                  Write-Host "Created folder: uid=$($updatedFolder.uid) id=$($updatedFolder.id)"
                } catch {
                  Write-Host "ERROR: could not create folder $folderUid on $GrafanaURL — $($_.Exception.Message)"
                  continue
                }
              }

              # Upload dashboards (top-level json files only)
              $localUids = @()
              $jsonFiles = Get-ChildItem -Path $clientPath -Filter "*.json" -File -ErrorAction SilentlyContinue
              if (-not $jsonFiles -or $jsonFiles.Count -eq 0) {
                Write-Host "No json files found in $clientPath — skipping client"
                continue
              }

              foreach ($file in $jsonFiles) {
                Write-Host "Processing file: $($file.FullName)"
                $raw = Get-Content -Raw -Path $file.FullName -ErrorAction Stop

                # Validate JSON and parse
                try {
                  $dashboard = $raw | ConvertFrom-Json -ErrorAction Stop
                } catch {
                  Write-Host "Invalid JSON in file: $($file.FullName) — skipping. Error: $($_.Exception.Message)"
                  continue
                }

                if (-not $dashboard.uid) {
                  Write-Host "ERROR: dashboard in file $($file.Name) has no 'uid' property — skip this file."
                  continue
                }

                # Generate unique UID per target+client to avoid cross-client collisions
                $originalUid = $dashboard.uid
                $newUid = "$($targetName)-$clientName-$originalUid"

                $changedUid = $false
                if ($dashboard.uid -ne $newUid) {
                  $dashboard.uid = $newUid
                  $dashboard.id = $null   # important: reset id so Grafana creates new dashboard instead of trying to update missing id
                  $changedUid = $true
                }

                # Optional: remove 'version' field to avoid version conflicts (Grafana ignores it on create)
                if ($dashboard.PSObject.Properties.Name -contains "version") {
                  $dashboard.PSObject.Properties.Remove("version")
                }

                $localUids += $dashboard.uid

                $uploadPayload = @{
                  dashboard = $dashboard
                  folderUid = $folderUid
                  overwrite = $true
                } | ConvertTo-Json -Depth 20

                Write-Host "Uploading $($file.Name) -> uid: $($dashboard.uid) (changedUid: $changedUid)"
                try {
                  $resp = Invoke-RestMethod -Uri "$GrafanaURL/api/dashboards/db" -Method Post -Headers @{
                    Authorization = "Bearer $ApiToken"
                    "Content-Type" = "application/json"
                  } -Body $uploadPayload -ErrorAction Stop
                  Write-Host "Upload success: uid=$($resp.uid) url=$($resp.url) version=$($resp.version)"
                } catch {
                  # try to extract useful message
                  $err = $_
                  $msg = $err.Exception.Message
                  if ($err.Exception.Response) {
                    try {
                      $s = $err.Exception.Response.GetResponseStream()
                      $sr = New-Object System.IO.StreamReader($s)
                      $body = $sr.ReadToEnd()
                      $sr.Close()
                      $msg = $body
                    } catch {}
                  }
                  Write-Host "ERROR uploading $($file.Name): $msg"
                  # do not exit whole job; continue to next file
                  continue
                }
              } # foreach file

              # Remove dashboards in Grafana folder that are not present in repo (compare by the _generated_ uids)
              try {
                $allDashboards = Invoke-RestMethod -Uri "$GrafanaURL/api/search?query=&type=dash-db" -Headers @{ Authorization = "Bearer $ApiToken" } -ErrorAction Stop
              } catch {
                Write-Host "ERROR: cannot list dashboards on $GrafanaURL — $($_.Exception.Message)"
                continue
              }

              $folderDashboards = $allDashboards | Where-Object { $_.folderId -eq $updatedFolder.id }
              $toDelete = $folderDashboards | Where-Object { $localUids -notcontains $_.uid }

              foreach ($dash in $toDelete) {
                Write-Host "Deleting dashboard '$($dash.title)' (uid: $($dash.uid)) in folder $($updatedFolder.title)"
                try {
                  $delResp = Invoke-RestMethod -Uri "$GrafanaURL/api/dashboards/uid/$($dash.uid)" -Method Delete -Headers @{ Authorization = "Bearer $ApiToken" } -ErrorAction Stop
                  Write-Host "Deleted: $($delResp.message)"
                } catch {
                  Write-Host "ERROR deleting uid $($dash.uid): $($_.Exception.Message)"
                }
              }
            } # foreach client folder

            # Delete Grafana folders that no longer exist in Git
            foreach ($grafanaFolder in $grafanaFolders) {
              $uid = $grafanaFolder.uid.ToLower()
              if ($gitFolderNames -notcontains $uid) {
                Write-Host "`nFolder '$uid' not found in Git for target $targetName. Deleting folder and its dashboards..."

                try {
                  $allDashboards = Invoke-RestMethod -Uri "$GrafanaURL/api/search?query=&type=dash-db" -Headers @{ Authorization = "Bearer $ApiToken" } -ErrorAction Stop
                  $dashboardsInFolder = $allDashboards | Where-Object { $_.folderId -eq $grafanaFolder.id }
                } catch {
                  Write-Host "ERROR fetching dashboards for folder $uid: $($_.Exception.Message)"
                  continue
                }

                foreach ($dash in $dashboardsInFolder) {
                  Write-Host "Deleting dashboard '$($dash.title)' (uid: $($dash.uid))..."
                  try {
                    Invoke-RestMethod -Uri "$GrafanaURL/api/dashboards/uid/$($dash.uid)" -Method Delete -Headers @{ Authorization = "Bearer $ApiToken" } -ErrorAction Stop
                  } catch {
                    Write-Host "ERROR deleting dashboard $($dash.uid): $($_.Exception.Message)"
                  }
