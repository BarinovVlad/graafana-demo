name: Deploy Grafana Dashboards

on:
  push:
    paths:
      - 'dashboards/**'
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy dashboards to all Grafana instances
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"

          # Map host folders to Grafana instances
          $grafanaTargets = @{
            "host1" = @{ Url = "http://localhost:3000"; Token = "${{ secrets.GRAFANA_API_TOKEN }}" }
            "host2" = @{ Url = "http://localhost:3001"; Token = "${{ secrets.GRAFANA_API_TOKENV_2 }}" }
          }

          # Function to deploy a dashboard to a Grafana instance
          function Deploy-Dashboards {
            param (
              [string]$BasePath,
              [string]$GrafanaURL,
              [string]$ApiToken
            )

            Write-Host "`n=== Deploying from: $BasePath to $GrafanaURL ==="

            $clientFolders = Get-ChildItem -Path $BasePath -Directory -ErrorAction SilentlyContinue
            if (-not $clientFolders) {
              Write-Host "No folders in $BasePath"
              return
            }

            foreach ($folder in $clientFolders) {
              $folderUid = $folder.Name.ToLower()

              try {
                $updatedFolder = Invoke-RestMethod -Uri "$GrafanaURL/api/folders/$folderUid" -Headers @{ Authorization = "Bearer $ApiToken" }
              } catch {
                $payload = @{ uid = $folderUid; title = $folder.Name } | ConvertTo-Json -Compress
                $updatedFolder = Invoke-RestMethod -Uri "$GrafanaURL/api/folders" -Method Post -Headers @{
                  Authorization = "Bearer $ApiToken"
                  "Content-Type" = "application/json"
                } -Body $payload
              }

              # Deploy dashboards
              Get-ChildItem -Path $folder.FullName -Filter "*.json" | ForEach-Object {
                $json = Get-Content $_.FullName -Raw
                $dashboard = $json | ConvertFrom-Json
                if (-not $dashboard.uid) {
                  Write-Host "Dashboard missing UID: $($_.Name)"
                  return
                }

                $uploadPayload = @{
                  dashboard = $dashboard
                  folderUid = $folderUid
                  overwrite = $true
                } | ConvertTo-Json -Depth 10

                Write-Host "Uploading dashboard: $($_.Name) to folder: $folderUid"
                Invoke-RestMethod -Uri "$GrafanaURL/api/dashboards/db" -Method Post -Headers @{
                  Authorization = "Bearer $ApiToken"
                  "Content-Type" = "application/json"
                } -Body $uploadPayload
              }
            }
          }

          # Deploy shared dashboards to all instances
          foreach ($target in $grafanaTargets.GetEnumerator()) {
            $grafana = $target.Value
            Write-Host "`n##### Deploying shared dashboards to $($grafana.Url)"
            Deploy-Dashboards -BasePath "./dashboards/shared" -GrafanaURL $grafana.Url -ApiToken $grafana.Token
          }

          # Deploy host-specific dashboards
          foreach ($host in $grafanaTargets.Keys) {
            $grafana = $grafanaTargets[$host]
            $hostPath = "./dashboards/$host"

            Write-Host "`n##### Deploying $host dashboards to $($grafana.Url)"
            Deploy-Dashboards -BasePath $hostPath -GrafanaURL $grafana.Url -ApiToken $grafana.Token
          }
