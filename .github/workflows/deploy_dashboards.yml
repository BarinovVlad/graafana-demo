$ErrorActionPreference = "Stop"

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Grafana ===
$GrafanaURL = "http://localhost:3000"
$ApiToken = "${{ secrets.GRAFANA_API_TOKEN }}"

$baseFolder = "./dashboards/hostA"
$libraryPanelsDir = "./provisioning/library_panels"

Write-Host "`n===== Deploying to Grafana at $GrafanaURL ====="

# === –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ library panels ===
try {
    $existingPanels = Invoke-RestMethod -Uri "$GrafanaURL/api/library-elements" -Headers @{
        Authorization = "Bearer $ApiToken"
    }

    if ($existingPanels.elements) {
        foreach ($panel in $existingPanels.elements) {
            Invoke-RestMethod -Uri "$GrafanaURL/api/library-elements/$($panel.uid)" -Method Delete -Headers @{
                Authorization = "Bearer $ApiToken"
            }
            Write-Host "Deleted existing panel by UID: $($panel.uid)"
        }
    } else {
        Write-Host "No existing library panels to delete."
    }
} catch {
    Write-Host "Failed to fetch existing library panels, continuing..."
}

# === –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ library panels ===
if (Test-Path $libraryPanelsDir) {
    Write-Host "`nDeploying library panels from $libraryPanelsDir"
    Get-ChildItem -Path $libraryPanelsDir -Filter "*.json" | ForEach-Object {
        $panel = Get-Content $_.FullName -Raw | ConvertFrom-Json

        if (-not $panel.uid) {
            Write-Host "Skipping panel with missing UID: $($_.Name)"
            return
        }

        # –£–¥–∞–ª—è–µ–º id –∏ version, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        if ($panel.PSObject.Properties.Name -contains 'id') { $panel.PSObject.Properties.Remove('id') }
        if ($panel.PSObject.Properties.Name -contains 'version') { $panel.PSObject.Properties.Remove('version') }

        $uploadPayload = $panel | ConvertTo-Json -Depth 20

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        Invoke-RestMethod -Uri "$GrafanaURL/api/library-elements" -Method Post -Headers @{
            Authorization = "Bearer $ApiToken"
            "Content-Type"  = "application/json"
        } -Body $uploadPayload

        Write-Host "‚úÖ Deployed library panel: $($panel.uid)"
    }
} else {
    Write-Host "Library panels folder not found: $libraryPanelsDir"
}

# === –î–µ–ø–ª–æ–π dashboards ===
$gitFolders = Get-ChildItem -Path $baseFolder -Directory -ErrorAction SilentlyContinue
if (-not $gitFolders) {
    Write-Host "No folders found in $baseFolder"
} else {
    foreach ($folder in $gitFolders) {
        $clientName = $folder.Name
        $folderUid = $clientName.ToLower()
        $clientPath = $folder.FullName

        Write-Host "`n=== Processing client: $clientName ==="

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –≤ Grafana, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try {
            $updatedFolder = Invoke-RestMethod -Uri "$GrafanaURL/api/folders/$folderUid" -Headers @{
                Authorization = "Bearer $ApiToken"
            }
            Write-Host "Folder '$folderUid' exists in Grafana."
        } catch {
            Write-Host "Creating folder '$folderUid'..."
            $payload = @{ uid = $folderUid; title = $clientName } | ConvertTo-Json -Compress
            $updatedFolder = Invoke-RestMethod -Uri "$GrafanaURL/api/folders" -Method Post -Headers @{
                Authorization = "Bearer $ApiToken"
                "Content-Type" = "application/json"
            } -Body $payload
        }

        # –ó–∞–≥—Ä—É–∂–∞–µ–º dashboards
        $localUids = @()
        Get-ChildItem -Path $clientPath -Filter "*.json" | ForEach-Object {
            $json = Get-Content $_.FullName -Raw
            $dashboard = $json | ConvertFrom-Json

            if (-not $dashboard.uid) {
                Write-Error "Dashboard '$($_.Name)' missing 'uid'."
                exit 1
            }

            # –£–¥–∞–ª—è–µ–º id –∏ version –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
            if ($dashboard.PSObject.Properties.Name -contains 'id') { $dashboard.PSObject.Properties.Remove('id') }
            if ($dashboard.PSObject.Properties.Name -contains 'version') { $dashboard.PSObject.Properties.Remove('version') }

            $localUids += $dashboard.uid

            $uploadPayload = @{
                dashboard = $dashboard
                folderUid = $folderUid
                overwrite = $true
            } | ConvertTo-Json -Depth 10

            Write-Host "Uploading dashboard: $($_.Name)"
            Invoke-RestMethod -Uri "$GrafanaURL/api/dashboards/db" -Method Post -Headers @{
                Authorization = "Bearer $ApiToken"
                "Content-Type" = "application/json"
            } -Body $uploadPayload
        }
    }
}

Write-Host "`nüéâ Deployment completed successfully!"
