name: Deploy Grafana Dashboards

on:
  push:
    paths:
      - 'dashboards/**'
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy all client dashboards
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          $GrafanaURL = "http://localhost:3000"
          $ApiToken = "${{ secrets.GRAFANA_API_TOKEN }}"

          $clients = Get-ChildItem -Path "./dashboards" -Directory

          foreach ($client in $clients) {
            $clientName = $client.Name
            $clientPath = $client.FullName
            $folderUid = $clientName.ToLower()

            Write-Host "`n=== Processing client: $clientName (folderUid: $folderUid) ==="

            # Ensure folder exists in Grafana
            try {
              $folder = Invoke-RestMethod -Uri "$GrafanaURL/api/folders/$folderUid" -Headers @{
                Authorization = "Bearer $ApiToken"
                "Content-Type" = "application/json"
              } -Method Get
              Write-Host "Folder '$folderUid' exists."
            }
            catch {
              Write-Host "Creating folder '$folderUid'..."
              $folderPayload = @{ uid = $folderUid; title = $clientName } | ConvertTo-Json -Compress
              $folder = Invoke-RestMethod -Uri "$GrafanaURL/api/folders" -Method Post -Headers @{
                Authorization = "Bearer $ApiToken"
                "Content-Type" = "application/json"
              } -Body $folderPayload
            }

            $folderId = $folder.id

            # Upload local dashboards
            $localUids = @()
            Get-ChildItem -Path $clientPath -Filter "*.json" | ForEach-Object {
              $json = Get-Content $_.FullName -Raw
              $dashboard = $json | ConvertFrom-Json

              if (-not $dashboard.uid) {
                Write-Error "Dashboard $($_.Name) in $clientName has no 'uid'."
                exit 1
              }

              $localUids += $dashboard.uid

              $payload = @{
                dashboard = $dashboard
                folderUid = $folderUid
                overwrite = $true
              } | ConvertTo-Json -Depth 10

              Write-Host "Uploading dashboard: $($_.Name)..."
              Invoke-RestMethod -Uri "$GrafanaURL/api/dashboards/db" -Method Post -Headers @{
                Authorization = "Bearer $ApiToken"
                "Content-Type" = "application/json"
              } -Body $payload
            }

            # Get existing dashboards in Grafana for this folder
            $grafanaDashboards = Invoke-RestMethod -Uri "$GrafanaURL/api/search?folderIds=$folderId&type=dash-db" -Headers @{
              Authorization = "Bearer $ApiToken"
            }

            Write-Host "Local UIDs in $clientName:"
            $localUids | ForEach-Object { Write-Host " - $_" }

            Write-Host "Grafana UIDs in $clientName:"
            $grafanaDashboards | ForEach-Object { Write-Host " - $($_.uid)" }

            $toDelete = $grafanaDashboards | Where-Object { $localUids -notcontains $_.uid }

            if ($toDelete.Count -eq 0) {
              Write-Host "No dashboards to delete for $clientName."
            } else {
              Write-Host "Deleting dashboards for $clientName:"
              foreach ($dash in $toDelete) {
                Write-Host "Deleting dashboard '$($dash.title)' with uid '$($dash.uid)'..."
                Invoke-RestMethod -Uri "$GrafanaURL/api/dashboards/uid/$($dash.uid)" -Method Delete -Headers @{
                  Authorization = "Bearer $ApiToken"
                }
              }
            }
          }
