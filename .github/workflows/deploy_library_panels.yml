name: Deploy Grafana Library Panels

on:
  push:
    paths:
      - 'provisioning/library_panels/**'
    branches:
      - main

jobs:
  deploy-library-panels:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy library panels to Grafana hostA and hostB
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"

          $grafanaTargets = @(
            @{ Url = "http://localhost:3000"; Token = "${{ secrets.GRAFANA_API_TOKEN }}" },
            @{ Url = "http://localhost:3001"; Token = "${{ secrets.GRAFANA_API_TOKENV_2 }}" }
          )

          $datasourceMap = @{
            "http://localhost:3000" = @{ "prometheus" = "ceu6ho1muemm8a" }
            "http://localhost:3001" = @{ "prometheus" = "aeu6eea0zjdvke" }
          }

          $baseFolder = "./provisioning/library_panels"
          if (-not (Test-Path $baseFolder)) {
            Write-Host "No library panels folder found. Skipping."
            exit 0
          }

          foreach ($target in $grafanaTargets) {
            $GrafanaURL = $target.Url
            $ApiToken   = $target.Token

            Write-Host "`n===== Deploying library panels to $GrafanaURL ====="

            $localUids = @()

            Get-ChildItem -Path $baseFolder -Filter "*.json" | ForEach-Object {
              $file = $_
              $raw  = Get-Content $file.FullName -Raw
              $item = $raw | ConvertFrom-Json

              if ($item.result) { $item = $item.result }

              if (-not $item.uid)   { throw "Library panel '$($file.Name)' missing 'uid'." }
              if (-not $item.model) { throw "Library panel '$($file.Name)' missing 'model'." }

              $panelUid  = $item.uid
              $panelName = if ($item.name) { $item.name } elseif ($item.model.title) { $item.model.title } else { [System.IO.Path]::GetFileNameWithoutExtension($file.Name) }
              $localUids += $panelUid

              if ($item.model.targets) {
                foreach ($t in $item.model.targets) {
                  if ($t.datasource -is [Hashtable] -and $t.datasource.type) {
                    $dsType = $t.datasource.type
                    if ($datasourceMap[$GrafanaURL][$dsType]) {
                      $t.datasource.uid = $datasourceMap[$GrafanaURL][$dsType]
                    }
                  }
                }
              }

              $existing = $null
              try {
                $resp = Invoke-RestMethod -Uri "$GrafanaURL/api/library-elements/$panelUid" -Headers @{ Authorization = "Bearer $ApiToken" }
                $existing = $resp.result
              } catch {}

              if ($existing) {
                $version = $existing.version
                $patch = @{
                  uid     = $panelUid
                  name    = $panelName
                  kind    = 1
                  model   = $item.model
                  version = $version
                } | ConvertTo-Json -Depth 30

                try {
                  Write-Host "Updating library panel '$panelName' (uid: $panelUid)..."
                  Invoke-RestMethod -Uri "$GrafanaURL/api/library-elements/$panelUid" -Method Patch -Headers @{
                    Authorization = "Bearer $ApiToken"
                    "Content-Type" = "application/json"
                  } -Body $patch | Out-Null
                } catch {
                  $status = $_.Exception.Response.StatusCode.value__ 2>$null
                  if ($status -eq 412) {
                    Write-Host "Version mismatch for $panelUid; refetching..."
                    $fresh = (Invoke-RestMethod -Uri "$GrafanaURL/api/library-elements/$panelUid" -Headers @{ Authorization = "Bearer $ApiToken" }).result
                    $patch2 = @{
                      uid     = $panelUid
                      name    = $panelName
                      kind    = 1
                      model   = $item.model
                      version = $fresh.version
                    } | ConvertTo-Json -Depth 30

                    Invoke-RestMethod -Uri "$GrafanaURL/api/library-elements/$panelUid" -Method Patch -Headers @{
                      Authorization = "Bearer $ApiToken"
                      "Content-Type" = "application/json"
                    } -Body $patch2 | Out-Null
                  } else {
                    throw
                  }
                }
              } else {
                $create = @{
                  uid   = $panelUid
                  name  = $panelName
                  kind  = 1
                  model = $item.model
                } | ConvertTo-Json -Depth 30

                Write-Host "Creating library panel '$panelName' (uid: $panelUid)..."
                Invoke-RestMethod -Uri "$GrafanaURL/api/library-elements" -Method Post -Headers @{
                  Authorization = "Bearer $ApiToken"
                  "Content-Type" = "application/json"
                } -Body $create | Out-Null
              }
            }

            $page = 1; $perPage = 500; $remote = @()
            do {
              $res = Invoke-RestMethod -Uri "$GrafanaURL/api/library-elements?kind=1&perPage=$perPage&page=$page" -Headers @{ Authorization = "Bearer $ApiToken" }
              $remote += $res.result.elements
              $page++
            } while ($remote.Count -lt $res.result.totalCount)

            $toDelete = @($remote | Where-Object { $localUids -notcontains $_.uid })

            foreach ($el in $toDelete) {
              $conn = (Invoke-RestMethod -Uri "$GrafanaURL/api/library-elements/$($el.uid)/connections" -Headers @{ Authorization = "Bearer $ApiToken" }).result
              if ($conn -and $conn.Count -gt 0) {
                Write-Warning "Skip delete '$($el.name)' uid=$($el.uid): in use ($($conn.Count) connections)."
                continue
              }

              Write-Host "Deleting library panel '$($el.name)' uid=$($el.uid)..."
              Invoke-RestMethod -Uri "$GrafanaURL/api/library-elements/$($el.uid)" -Method Delete -Headers @{
                Authorization = "Bearer $ApiToken"
              } | Out-Null
            }
          }
